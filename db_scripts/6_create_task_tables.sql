CREATE OR REPLACE TABLE USERS (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	FIRST_NAME VARCHAR(255) NOT NULL,
	LAST_NAME VARCHAR(255) NOT NULL,
	USERNAME VARCHAR(255) NOT NULL UNIQUE,
	EMAIL VARCHAR(255) NOT NULL UNIQUE,
	PASSWORD_HASH CHAR(60) NOT NULL,
	PROFILE_PICTURE_PATH VARCHAR(255),
	LANGUAGE_ISO_CODE VARCHAR(2)
);

CREATE OR REPLACE TABLE CATEGORIES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	OWNER_ID INT NOT NULL,
	NAME VARCHAR(255) NOT NULL,
	COLOR_SCHEME_ID INT NOT NULL,

	FOREIGN KEY (OWNER_ID) REFERENCES USERS(ID),
	FOREIGN KEY (COLOR_SCHEME_ID) REFERENCES COLOR_SCHEMES(ID)
);

CREATE OR REPLACE TABLE FILES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	ORIGINAL_NAME VARCHAR(1000) NOT NULL,
	SERVER_NAME VARCHAR(1000) NOT NULL,
	EXTENSION VARCHAR(100),
	TITLE VARCHAR(1000) NOT NULL,
	DESCRIPTION TEXT,
	UPLOADED_ON DATETIME NOT NULL
);

CREATE OR REPLACE TABLE FILE_PRIVILEGES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	USER_ID INT NOT NULL,
	FILE_ID INT NOT NULL,
	PRIVILEGE VARCHAR(10) NOT NULL,

	FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
	FOREIGN KEY (FILE_ID) REFERENCES FILES(ID)
);

CREATE OR REPLACE TABLE FILES_HAVE_CATEGORIES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	FILE_ID INT NOT NULL,
	CATEGORY_ID INT NOT NULL,

	FOREIGN KEY (FILE_ID) REFERENCES FILES(ID),
	FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(ID)
);

CREATE OR REPLACE TABLE NOTES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	TITLE VARCHAR(1000) NOT NULL,
	DESCRIPTION TEXT,
	CREATED_ON DATETIME NOT NULL
);

CREATE OR REPLACE TABLE NOTE_PRIVILEGES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	USER_ID INT NOT NULL,
	NOTE_ID INT NOT NULL,
	PRIVILEGE VARCHAR(10) NOT NULL,

	FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
	FOREIGN KEY (NOTE_ID) REFERENCES NOTES(ID)
);

CREATE OR REPLACE TABLE NOTES_HAVE_CATEGORIES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	NOTE_ID INT NOT NULL,
	CATEGORY_ID INT NOT NULL,

	FOREIGN KEY (NOTE_ID) REFERENCES NOTES(ID),
	FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(ID)
);

CREATE OR REPLACE TABLE PROJECTS (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	TITLE VARCHAR(1000) NOT NULL,
	DESCRIPTION TEXT,
	CREATED_ON DATETIME NOT NULL,
	ENDED_ON DATETIME,
	DEADLINE DATETIME
);

CREATE OR REPLACE TABLE PROJECT_PRIVILEGES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	USER_ID INT NOT NULL,
	PROJECT_ID INT NOT NULL,
	PRIVILEGE VARCHAR(10) NOT NULL,

	FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
	FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS(ID)
);

CREATE OR REPLACE TABLE PROJECTS_HAVE_CATEGORIES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	PROJECT_ID INT NOT NULL,
	CATEGORY_ID INT NOT NULL,

	FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS(ID),
	FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(ID)
);

CREATE OR REPLACE TABLE USERS_HAVE_PROJECTS_HIDE_COMPLETED_TASKS(
	USER_ID INT NOT NULL,
	PROJECT_ID INT NOT NULL,
	HIDE_COMPLETED_TASKS BOOLEAN NOT NULL,

	PRIMARY KEY (USER_ID, PROJECT_ID),

	FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
	FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS(ID)
);

CREATE OR REPLACE TABLE NOTES_ATTACH_FILES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	NOTE_ID INT NOT NULL,
	FILE_ID INT NOT NULL,

	FOREIGN KEY (NOTE_ID) REFERENCES NOTES(ID),
	FOREIGN KEY (FILE_ID) REFERENCES FILES(ID)
);

CREATE OR REPLACE TABLE PROJECTS_ATTACH_NOTES (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	PROJECT_ID INT NOT NULL,
	NOTE_ID INT NOT NULL,

	FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS(ID),
	FOREIGN KEY (NOTE_ID) REFERENCES NOTES(ID)
);

CREATE OR REPLACE TABLE TASKS (
	ID INT AUTO_INCREMENT PRIMARY KEY,
	PROJECT_ID INT NOT NULL,
	PLACE INT NOT NULL,
	BLOCKER BOOLEAN NOT NULL,
	TITLE VARCHAR(250) NOT NULL,
	DESCRIPTION VARCHAR(15000),
	CREATED_ON DATETIME NOT NULL,
	COMPLETED_ON DATETIME,
	DURATION INT,
	DEADLINE DATETIME,

	FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS(ID)
);

CREATE OR REPLACE TABLE TASK_PRIVILEGES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    TASK_ID INT NOT NULL,
    PRIVILEGE VARCHAR(10) NOT NULL,

    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (TASK_ID) REFERENCES TASKS(ID)
);

CREATE OR REPLACE TABLE TASKS_ATTACH_NOTES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    TASK_ID INT NOT NULL,
    NOTE_ID INT NOT NULL,

    FOREIGN KEY (TASK_ID) REFERENCES TASKS(ID),
    FOREIGN KEY (NOTE_ID) REFERENCES NOTES(ID)
);
